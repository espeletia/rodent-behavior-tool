package view

import (
	"fmt"
	"ghiaccio/models"
	"time"
)

templ AppView(usr models.User, cages []models.Cage, analysis []models.VideoAnalysis) {
	<html>
		<head>
			<title>Ratt</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<style>
            @import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;0,1000;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900;1,1000&display=swap');

body, html {
    min-height: 100vh;
    margin: 0;
    overflow-x: hidden;
    font-family: 'Nunito', sans-serif;
    border-sizing: border-box;
}
.fab-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            align-items: end;
        }
        .fab, .fab-option {
            width: :fit-content;
            min-width: 60px;
            height: 60px;
            border-radius: 10%;
            background-color: #007bff;
            color: white;
            border: none;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 30px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }
        .fab-option {
            margin-bottom: 10px;
            font-size: 24px;
            transform: scale(0);
        }
        .fab-container.expanded .fab-option {
            transform: scale(1);
        }
        .fab-container.expanded .fab {
            background-color: #C35817;
        }
            </style>
		</head>
		<body class="bg-slate-950 text-slate-50">
			@Header()
			{ Greeting(usr.DisplayName) }
			@CageTable(cages)
			@Button()
			@VideoAnalysisTable(analysis)
		</body>
	</html>
}

templ AboutView() {
	<html>
		<head>
			<title>Ratt</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<style>
            @import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;0,1000;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900;1,1000&display=swap');

body, html {
    min-height: 100vh;
    margin: 0;
    overflow-x: hidden;
    font-family: 'Nunito', sans-serif;
    border-sizing: border-box;
}
            </style>
		</head>
		<body class="bg-slate-950 text-slate-50">
			@Header()
			@About()
			@Button()
		</body>
	</html>
}

templ Button() {
	<div class="fab-container" id="fabContainer">
		<button class="fab-option" onclick="actionOne()">Cage</button>
		<button class="fab-option" onclick="actionTwo()">Video Analysis</button>
		<button class="fab" id="fabButton" onclick="toggleFab()">+</button>
	</div>
	<script>
        const fabContainer = document.getElementById('fabContainer');
        const fabButton = document.getElementById('fabButton');

        function toggleFab() {
            fabContainer.classList.toggle('expanded');
            fabButton.textContent = fabContainer.classList.contains('expanded') ? '×' : '+';
        }

        function actionOne() {
            alert('Action 1 triggered!');
        }

        function actionTwo() {
            alert('Action 2 triggered!');
        }

        document.addEventListener('click', function(event) {
            if (!fabContainer.contains(event.target)) {
                fabContainer.classList.remove('expanded');
                fabButton.textContent = '+';
            }
        });
    </script>
}

templ About() {
	<article class="centerStage"><h2>I'm a developer working on this project for a school and for a graduation project</h2><br/><h3>The story about this project was as follows:</h3><br/><p>In the third year of highschool, we had to choose a project for graduation.</p><p>There were project topics that the teachers provided to us, but i insisted to do this.</p><p>When i chose this project, Mrs Janů took a lead to this project.</p><p>After the summer break, i started to work on this project.</p><p>Made the first little steps.</p><p>The basic layout, some css, basic page layout and so on.</p><p>Then the problems came by.</p><p>I started to work on the actuall flowerpot and the software behind it.</p><p>On the Raspberry Pi, I went and installed the OS and then Python, because there were relatively easily accessable libraries for the sensosr i had.</p><p>But the big mistake was to stick with the first, easier to setup, but harder to work with method.</p><p>I chose to use Firebase Realtime Database.</p><p>The Realtime Database was at the time the obvious option, because it was by the name, "realtime".</p><p>I set up the RPi to send data to it and it worked.</p><p>But reading the data from the frontend was a lot more difficult than i anticipated.</p><p>I just couldn't make it work and got stuck on it for too long.</p><p>When the situation reached a breaking point, i bit my tongue and started working on it for good.</p><p>I rewrote the code on the RPi to send the data from sensors to the standard Firestore, which made it a lot easyer to read on the frontend.</p><p>I assambled the whole flowerpot with all of the sensors and the RPi into the flowerpot i've designed and made my girlfriend print on her 3D printer.</p><p>Made some final touches to it and continued working on the software again.</p><p>With the software, I made a good progress from the way it looked then.</p><p>I made the site work relatively intuitively for at least my family that I shown my project.</p><p>When the time had come, i did the last couple of things just to make it mostly work.</p><p>There are still a lot of work to do.</p><p>I need to make the site look a lot better, I need to add the authentification and a lot more stuff I'm forgetting.</p><p>For the graduation project, this is what I made, a "working" site that displays the data to the user in an intuitive Ui that anyone using the site would understand what he is looking at.</p><p>I cannot work at the project anymore, since it is allready submited, but I certainly will work at it after the school and hopefully make it a real thing that people could buy or make their own, since all the stuff but the software is of the shelf.</p></article>
	<article class="centerStage"><p>So i've failed to make this project good enough to success and for the school to let me graduate.</p></article>
}

func Greeting(displayName string) string {
	hour := time.Now().Hour()
	switch {
	case hour < 12:
		return "Good morning " + displayName
	case hour < 18:
		return "Good afternoon " + displayName
	default:
		return "Good evening " + displayName
	}
}

// Component to display VideoAnalysis in a table
templ VideoAnalysisTable(analyses []models.VideoAnalysis) {
	<div class="w-full overflow-x-auto">
		<table class="table-auto w-full">
			<thead class="bg-slate-900 text-slate-100">
				<tr>
					<th class="px-4 py-3 text-left">ID</th>
					<th class="px-4 py-3 text-left">Name</th>
					<th class="px-4 py-3 text-left">Owner ID</th>
					<th class="px-4 py-3 text-left">Description</th>
					<th class="px-4 py-3 text-left">Video</th>
				</tr>
			</thead>
			<tbody>
				for _, analysis := range analyses {
					<tr class="odd:bg-slate-800 even:bg-slate-850 hover:bg-slate-700">
						<td class="px-4 py-2 text-center">{ analysis.ID }</td>
						<td class="px-4 py-2 text-center">{ analysis.Name }</td>
						<td class="px-4 py-2 text-center">
							if analysis.OwnerId != nil {
								{ *analysis.OwnerId }
							} else {
								N/A
							}
						</td>
						<td class="px-4 py-2 text-center">
							if analysis.Description != nil {
								{ *analysis.Description }
							} else {
								N/A
							}
						</td>
						<td class="px-4 py-2 text-center">
							<a href={ templ.SafeURL(analysis.Video.Url) }>Video</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

// Component to display Cage in a table
templ CageTable(cages []models.Cage) {
	<div class="w-full flex justify-center">
		<div class="w-full max-w-md overflow-x-auto rounded-lg shadow-md">
			<table class="table-auto w-full border-collapse rounded-lg overflow-hidden">
				<thead class="bg-slate-900 text-slate-100">
					<tr>
						<th class="px-6 py-3 text-left">ID</th>
						<th class="px-6 py-3 text-left">Name</th>
					</tr>
				</thead>
				<tbody>
					for _, cage := range cages {
						<tr class="odd:bg-slate-800 even:bg-slate-850 hover:bg-slate-700">
							<td class="px-6 py-3 text-center">
								<a href={ templ.SafeURL(fmt.Sprintf("/cage/%s", cage.ID)) } class="text-blue-400 hover:underline">
									{ cage.ID }
								</a>
							</td>
							<td class="px-6 py-3 text-center">{ cage.Name }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}
